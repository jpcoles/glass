import matplotlib as mpl
import pylab as pl
glass_basis('glass.basis.pixels', solver='rwalk')


def reporter(history):
    print 'STAT: ', history[-1]



meta(author='some user', notes='using LensModellingTools')

setup_log('log.txt', stdout=False)
setup_status_reporter([reporter])

samplex_random_seed(0)
samplex_acceptance(rate=0.25, tol=0.15)
exclude_all_priors()
include_prior(
  'lens_eq',
  'time_delay',
  'profile_steepness',
  'J3gradient',
  'magnification',
  'hubble_constant',
  'PLsmoothness3',
  'shared_h',
  'external_shear',
  'external_mass',
)
hubble_time(13.700000)
globject('lensidddd')
zlens(0.500)
pixrad(10)
steepness(0,None)
smooth(2.00,include_central_pixel=False)
local_gradient(45.00)
symm()

shear(0.01)

A = -8.365, -8.714
B = 8.017, -9.411
C = 0.697, -10.631
D = 0.171, 6.786
source(1.000,
  A, 'min', 
  B, 'min', None,
  C, 'sad', None,
  D, 'sad', None)
external_mass(PointMass(11.4564,-0.0854,name='PM3'),25.578368)
external_mass(PointMass(3.9831,-18.9461,name='PM4'),16.957259)
external_mass(PointMass(-6.9245,-19.5404,name='PM6'),76.566878)
external_mass(PointMass(13.0156,-14.6534,name='PM7'),13.065595)
model(200)


savestate('state.txt')

env().make_ensemble_average()

set_status('creating plots', i=0, of=4)
env().arrival_plot(env().ensemble_average, only_contours=True, colors='magenta', clevels=40)
env().overlay_input_points(env().ensemble_average)
pl.gca().axes.get_xaxis().set_visible(False)
pl.gca().axes.get_yaxis().set_visible(False)
pl.savefig('img1.png')
pl.close()

set_status('creating plots', i=1, of=4)
env().kappa_plot(env().ensemble_average, 0, with_contours=True, clevels=20, vmax=1, with_colorbar=False)
pl.gca().axes.get_xaxis().set_visible(False)
pl.gca().axes.get_yaxis().set_visible(False)
pl.savefig('img2.png')
pl.close()

set_status('creating plots', i=2, of=4)
env().srcdiff_plot(env().ensemble_average)
env().overlay_input_points(env().ensemble_average)
pl.gca().axes.get_xaxis().set_visible(False)
pl.gca().axes.get_yaxis().set_visible(False)
pl.savefig('img3.png')
pl.close()

set_status('creating plots', i=3, of=4)
env().srcdiff_plot_adv(env().ensemble_average, night=True, upsample=8)
env().overlay_input_points(env().ensemble_average)
pl.savefig('img3_ipol.png', facecolor='black', edgecolor='none')
pl.close()

set_status('creating plots', i=4, of=4)

LMT={
}

set_status('finished')


hist = get_status_history()
for i in hist:
    print i
